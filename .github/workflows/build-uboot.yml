name: Build MT7981 U-Boot FIP and Release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag（可选，不填则自动生成）'
        required: false
      name:
        description: 'Release 标题（可选，不填则自动生成）'
        required: false
      prerelease:
        description: '是否标记为 Pre-release'
        required: false
        default: 'false'

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential bc bison flex swig python3-dev \
            device-tree-compiler libssl-dev git \
            gcc-aarch64-linux-gnu pkg-config

      - name: Clone TF-A (OpenWrt master with MT7981)
        run: git clone --depth=1 https://github.com/openwrt/trusted-firmware-a.git -b master tf-a

      - name: Build TF-A (BL31)
        run: |
          cd tf-a
          make -j"$(nproc)" CROSS_COMPILE=aarch64-linux-gnu- PLAT=mt7981 RESET_TO_BL31=1 bl31
          make -j"$(nproc)" fiptool
          cd ..

      - name: Clone U-Boot (OpenWrt master)
        run: git clone --depth=1 https://github.com/openwrt/u-boot.git -b master u-boot

      - name: Configure U-Boot
        run: |
          cd u-boot
          make CROSS_COMPILE=aarch64-linux-gnu- mt7981_rfb_defconfig
          cat >> .config <<'EOF'
          CONFIG_FIT=y
          CONFIG_OF_LIBFDT=y
          CONFIG_LZMA=y
          CONFIG_LZO=y
          CONFIG_GZIP=y
          CONFIG_ZSTD=y
          CONFIG_CMD_BOOTZ=y
          CONFIG_CMD_BOOTI=y
          CONFIG_BOOTMETH_EFI=y
          CONFIG_MTD=y
          CONFIG_CMD_UBI=y
          CONFIG_CMD_UBIFS=y
          EOF
          yes "" | make olddefconfig
          cd ..

      - name: Build U-Boot (BL33)
        run: |
          cd u-boot
          make -j"$(nproc)" CROSS_COMPILE=aarch64-linux-gnu- \
            BL31=../tf-a/build/mt7981/release/bl31.bin
          cd ..

      - name: Create FIP
        run: |
          ./tf-a/build/fiptool/fiptool create \
            --soc-fw ./tf-a/build/mt7981/release/bl31.bin \
            --nt-fw  ./u-boot/u-boot.bin \
            fip.bin

      - name: Check FIP size (< 2 MiB)
        run: |
          FIP_SIZE=$(stat -c%s fip.bin)
          MAX=$((2*1024*1024))
          echo "FIP size: $FIP_SIZE bytes"
          if [ "$FIP_SIZE" -ge "$MAX" ]; then
            echo "Error: fip.bin exceeds 2 MiB partition size." >&2
            exit 1
          fi

      - name: Checksums
        run: |
          sha256sum fip.bin > fip.bin.sha256
          sha256sum u-boot/u-boot.bin > u-boot.bin.sha256

      - name: Collect metadata and release notes
        run: |
          TF_A_SHA=$(git -C tf-a rev-parse --short HEAD)
          UBOOT_SHA=$(git -C u-boot rev-parse --short HEAD)
          FIP_BYTES=$(stat -c%s fip.bin)
          UBOOT_BYTES=$(stat -c%s u-boot/u-boot.bin)

          if [ -n "${{ github.event.inputs.tag }}" ]; then
            TAG="${{ github.event.inputs.tag }}"
          else
            TAG="v$(date -u +%Y%m%d)-run${GITHUB_RUN_NUMBER}"
          fi
          if [ -n "${{ github.event.inputs.name }}" ]; then
            REL_NAME="${{ github.event.inputs.name }}"
          else
            REL_NAME="MT7981 FIP ${TAG}"
          fi
          echo "TAG=$TAG" >> $GITHUB_ENV
          echo "REL_NAME=$REL_NAME" >> $GITHUB_ENV

          {
            echo "## MT7981 U-Boot FIP"
            echo ""
            echo "- TF-A commit: \`$TF_A_SHA\`"
            echo "- U-Boot commit: \`$UBOOT_SHA\`"
            echo "- fip.bin: $FIP_BYTES bytes"
            echo "- u-boot.bin: $UBOOT_BYTES bytes"
            echo ""
            echo "### Features"
            echo "- FIT / FDT / LZMA / LZO / GZIP / ZSTD"
            echo "- MTD / UBI / UBIFS commands"
            echo ""
            echo "### Flashing (at your own risk)"
            echo '```sh'
            echo "dd if=/dev/mtd1 of=/tmp/bl2_backup.bin"
            echo "dd if=/dev/mtd4 of=/tmp/fip_backup.bin"
            echo "scp fip.bin root@ROUTER:/tmp/"
            echo "mtd write /tmp/fip.bin FIP"
            echo "sync && reboot"
            echo '```'
          } > RELEASE_NOTES.md

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: fip-mt7981
          path: |
            fip.bin
            fip.bin.sha256
            u-boot/u-boot.bin
            u-boot.bin.sha256
            RELEASE_NOTES.md

      - name: Create or update GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG }}
          name: ${{ env.REL_NAME }}
          body_path: RELEASE_NOTES.md
          prerelease: ${{ github.event.inputs.prerelease }}
          files: |
            fip.bin
            fip.bin.sha256
            u-boot/u-boot.bin
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
